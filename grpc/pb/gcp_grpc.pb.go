// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: grpc/proto/gcp.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GcpServiceClient is the client API for GcpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GcpServiceClient interface {
	// 取得下載連結
	GetDownloadUrl(ctx context.Context, in *ObjectKey, opts ...grpc.CallOption) (*Url, error)
	// 取得檔案
	GetFile(ctx context.Context, in *ObjectKey, opts ...grpc.CallOption) (*File, error)
	// 取得簽章
	GetSignedUrl(ctx context.Context, in *GetSignedUrlRequest, opts ...grpc.CallOption) (*Url, error)
	// 取得 AccessToken
	GetAccessToken(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AccessToken, error)
	// 儲存檔案
	SaveFile(ctx context.Context, in *SaveFileRequest, opts ...grpc.CallOption) (*Url, error)
	// 刪除
	Delete(ctx context.Context, in *ObjectKey, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 檢查檔案是否存在
	Exist(ctx context.Context, in *ObjectKey, opts ...grpc.CallOption) (*ExistResponse, error)
	// 列出
	List(ctx context.Context, in *Dir, opts ...grpc.CallOption) (*ListResponse, error)
}

type gcpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGcpServiceClient(cc grpc.ClientConnInterface) GcpServiceClient {
	return &gcpServiceClient{cc}
}

func (c *gcpServiceClient) GetDownloadUrl(ctx context.Context, in *ObjectKey, opts ...grpc.CallOption) (*Url, error) {
	out := new(Url)
	err := c.cc.Invoke(ctx, "/storage.GcpService/GetDownloadUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gcpServiceClient) GetFile(ctx context.Context, in *ObjectKey, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/storage.GcpService/GetFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gcpServiceClient) GetSignedUrl(ctx context.Context, in *GetSignedUrlRequest, opts ...grpc.CallOption) (*Url, error) {
	out := new(Url)
	err := c.cc.Invoke(ctx, "/storage.GcpService/GetSignedUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gcpServiceClient) GetAccessToken(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AccessToken, error) {
	out := new(AccessToken)
	err := c.cc.Invoke(ctx, "/storage.GcpService/GetAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gcpServiceClient) SaveFile(ctx context.Context, in *SaveFileRequest, opts ...grpc.CallOption) (*Url, error) {
	out := new(Url)
	err := c.cc.Invoke(ctx, "/storage.GcpService/SaveFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gcpServiceClient) Delete(ctx context.Context, in *ObjectKey, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/storage.GcpService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gcpServiceClient) Exist(ctx context.Context, in *ObjectKey, opts ...grpc.CallOption) (*ExistResponse, error) {
	out := new(ExistResponse)
	err := c.cc.Invoke(ctx, "/storage.GcpService/Exist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gcpServiceClient) List(ctx context.Context, in *Dir, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/storage.GcpService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GcpServiceServer is the server API for GcpService service.
// All implementations must embed UnimplementedGcpServiceServer
// for forward compatibility
type GcpServiceServer interface {
	// 取得下載連結
	GetDownloadUrl(context.Context, *ObjectKey) (*Url, error)
	// 取得檔案
	GetFile(context.Context, *ObjectKey) (*File, error)
	// 取得簽章
	GetSignedUrl(context.Context, *GetSignedUrlRequest) (*Url, error)
	// 取得 AccessToken
	GetAccessToken(context.Context, *emptypb.Empty) (*AccessToken, error)
	// 儲存檔案
	SaveFile(context.Context, *SaveFileRequest) (*Url, error)
	// 刪除
	Delete(context.Context, *ObjectKey) (*emptypb.Empty, error)
	// 檢查檔案是否存在
	Exist(context.Context, *ObjectKey) (*ExistResponse, error)
	// 列出
	List(context.Context, *Dir) (*ListResponse, error)
	mustEmbedUnimplementedGcpServiceServer()
}

// UnimplementedGcpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGcpServiceServer struct {
}

func (UnimplementedGcpServiceServer) GetDownloadUrl(context.Context, *ObjectKey) (*Url, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDownloadUrl not implemented")
}
func (UnimplementedGcpServiceServer) GetFile(context.Context, *ObjectKey) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedGcpServiceServer) GetSignedUrl(context.Context, *GetSignedUrlRequest) (*Url, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignedUrl not implemented")
}
func (UnimplementedGcpServiceServer) GetAccessToken(context.Context, *emptypb.Empty) (*AccessToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessToken not implemented")
}
func (UnimplementedGcpServiceServer) SaveFile(context.Context, *SaveFileRequest) (*Url, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveFile not implemented")
}
func (UnimplementedGcpServiceServer) Delete(context.Context, *ObjectKey) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGcpServiceServer) Exist(context.Context, *ObjectKey) (*ExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exist not implemented")
}
func (UnimplementedGcpServiceServer) List(context.Context, *Dir) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedGcpServiceServer) mustEmbedUnimplementedGcpServiceServer() {}

// UnsafeGcpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GcpServiceServer will
// result in compilation errors.
type UnsafeGcpServiceServer interface {
	mustEmbedUnimplementedGcpServiceServer()
}

func RegisterGcpServiceServer(s grpc.ServiceRegistrar, srv GcpServiceServer) {
	s.RegisterService(&GcpService_ServiceDesc, srv)
}

func _GcpService_GetDownloadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcpServiceServer).GetDownloadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.GcpService/GetDownloadUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcpServiceServer).GetDownloadUrl(ctx, req.(*ObjectKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _GcpService_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcpServiceServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.GcpService/GetFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcpServiceServer).GetFile(ctx, req.(*ObjectKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _GcpService_GetSignedUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSignedUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcpServiceServer).GetSignedUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.GcpService/GetSignedUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcpServiceServer).GetSignedUrl(ctx, req.(*GetSignedUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GcpService_GetAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcpServiceServer).GetAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.GcpService/GetAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcpServiceServer).GetAccessToken(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GcpService_SaveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcpServiceServer).SaveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.GcpService/SaveFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcpServiceServer).SaveFile(ctx, req.(*SaveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GcpService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcpServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.GcpService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcpServiceServer).Delete(ctx, req.(*ObjectKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _GcpService_Exist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcpServiceServer).Exist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.GcpService/Exist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcpServiceServer).Exist(ctx, req.(*ObjectKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _GcpService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dir)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcpServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.GcpService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcpServiceServer).List(ctx, req.(*Dir))
	}
	return interceptor(ctx, in, info, handler)
}

// GcpService_ServiceDesc is the grpc.ServiceDesc for GcpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GcpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storage.GcpService",
	HandlerType: (*GcpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDownloadUrl",
			Handler:    _GcpService_GetDownloadUrl_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _GcpService_GetFile_Handler,
		},
		{
			MethodName: "GetSignedUrl",
			Handler:    _GcpService_GetSignedUrl_Handler,
		},
		{
			MethodName: "GetAccessToken",
			Handler:    _GcpService_GetAccessToken_Handler,
		},
		{
			MethodName: "SaveFile",
			Handler:    _GcpService_SaveFile_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GcpService_Delete_Handler,
		},
		{
			MethodName: "Exist",
			Handler:    _GcpService_Exist_Handler,
		},
		{
			MethodName: "List",
			Handler:    _GcpService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/gcp.proto",
}
